package com.educationCenter.User_Database_Handler;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.sql.SQLException;

import static org.junit.jupiter.api.Assertions.*;

class UserDatabaseHelperTest {

    private UserDatabaseHelper dbHelper;

    @BeforeEach
    void setUp() throws SQLException {
        dbHelper = new UserDatabaseHelper();
        assertTrue(dbHelper.userConnectToDatabase(), "Database connection should be established successfully.");
    }

    @AfterEach
    void tearDown() {
        dbHelper.closeConnection();
    }

    @Test
    void userConnectToDatabase() throws SQLException {
        assertTrue(dbHelper.userConnectToDatabase(), "Database connection should work.");
    }

    @Test
    void getUserId() throws SQLException {
        dbHelper.register("testUser", "password", new String[]{"USER"});
        int userId = dbHelper.getUserId("testUser");
        assertNotEquals(0, userId, "User ID should not be zero for an existing user.");
    }

    @Test
    void getUsername() throws SQLException {
        dbHelper.register("testUser2", "password", new String[]{"USER"});
        int userId = dbHelper.getUserId("testUser2");
        String username = dbHelper.getUsername(userId);
        assertEquals("testUser2", username, "Username should match the inserted user.");
    }

    @Test
    void register() throws SQLException {
        dbHelper.register("newUser", "password", new String[]{"USER"});
        int userId = dbHelper.getUserId("newUser");
        assertNotEquals(0, userId, "User ID should not be zero after registration.");
    }

    @Test
    void studentRegister() throws SQLException {
        dbHelper.register("studentUser", "password", new String[]{"STUDENT"});
        boolean success = dbHelper.studentRegister("studentUserUpdated", "newPassword", "email@example.com");
        assertFalse(success, "Student registration should fail without an existing email.");
    }

    @Test
    void adminRegister() throws SQLException {
        dbHelper.adminRegister("adminUser", "password", new String[]{"ADMIN"});
        int userId = dbHelper.getUserId("adminUser");
        assertNotEquals(0, userId, "Admin registration should create a new user.");
    }


    @Test
    void generateUserByAdmin() throws SQLException {
        dbHelper.generateUserByAdmin("user@example.com", new String[]{"USER"}, "12345");
        String[] user = dbHelper.doesEmailExist("user@example.com");
        assertNotNull(user, "User generated by admin should exist in the database.");
    }

    @Test
    void login() throws SQLException {
        dbHelper.register("loginUser", "password", new String[]{"USER"});
        String[] user = dbHelper.login("loginUser", "password");
        assertNotNull(user, "Login should return user details for valid credentials.");
    }

    @Test
    void getStringArrayFromResult() throws SQLException {
        dbHelper.register("arrayTestUser", "password", new String[]{"USER"});
        String[] user = dbHelper.doesUserExist("arrayTestUser");
        assertNotNull(user, "Result set should be converted to a string array.");
    }

    @Test
    void getAllUsers() throws SQLException {
        dbHelper.register("allUser1", "password", new String[]{"USER"});
        dbHelper.register("allUser2", "password", new String[]{"USER"});
        String[][] users = dbHelper.getAllUsers();
        assertTrue(users.length >= 2, "Database should contain at least two users.");
    }

    @Test
    void doesUserExist() throws SQLException {
        dbHelper.register("existUser", "password", new String[]{"USER"});
        String[] user = dbHelper.doesUserExist("existUser");
        assertNotNull(user, "Existing user should return user details.");
    }

    @Test
    void doesEmailExist() throws SQLException {
        dbHelper.generateUserByAdmin("emailUser@example.com", new String[]{"USER"}, "1234");
        String[] user = dbHelper.doesEmailExist("emailUser@example.com");
        assertNotNull(user, "Existing email should return user details.");
    }

    @Test
    void displayUsersByAdmin() throws SQLException {
        dbHelper.register("displayUser", "password", new String[]{"USER"});
        assertDoesNotThrow(() -> dbHelper.displayUsersByAdmin(), "Displaying users should not throw exceptions.");
    }

    @Test
    void updateUserInformation() throws SQLException {
        dbHelper.register("updateUser", "password", new String[]{"USER"});
        boolean success = dbHelper.updateUserInformation("updateUser", new String[]{"John", "Middle", "Doe"});
        assertTrue(success, "User information should be updated successfully.");
    }

    @Test
    void updateRole() throws SQLException {
        dbHelper.register("roleUser", "password", new String[]{"USER"});
        boolean success = dbHelper.updateRole("roleUser", "ADMIN");
        assertTrue(success, "Updating role should be successful.");
    }


    @Test
    void checkInvitedUser() throws SQLException {
        dbHelper.generateUserByAdmin("invited@example.com", new String[]{"USER"}, "12345");
        String otp = dbHelper.checkInvitedUser("invited@example.com");
        assertEquals("12345", otp, "OTP should match the one set for the invited user.");
    }

    @Test
    void deleteUser() throws SQLException {
        dbHelper.register("deleteUser", "password", new String[]{"USER"});
        boolean success = dbHelper.deleteUser("deleteUser");
        assertTrue(success, "User should be deleted successfully.");
        assertNull(dbHelper.doesUserExist("deleteUser"), "Deleted user should no longer exist.");
    }

    @Test
    void closeConnection() {
        assertDoesNotThrow(() -> dbHelper.closeConnection(), "Closing connection should not throw exceptions.");
    }
}
